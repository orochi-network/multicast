/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MultiCast } from "../MultiCast";

export class MultiCast__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<MultiCast> {
    return super.deploy(overrides || {}) as Promise<MultiCast>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MultiCast {
    return super.attach(address) as MultiCast;
  }
  connect(signer: Signer): MultiCast__factory {
    return super.connect(signer) as MultiCast__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultiCast {
    return new Contract(address, _abi, signerOrProvider) as MultiCast;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
    ],
    name: "cast",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "result",
            type: "bytes",
          },
        ],
        internalType: "struct MultiCast.MulticastResult[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "addresses",
        type: "bytes",
      },
    ],
    name: "eth",
    outputs: [
      {
        internalType: "bytes",
        name: "balances",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "state",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "previousBlockHash",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "coinbase",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "difficulty",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gaslimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct MultiCast.EvmState",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506106ff806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806372da01fe14610046578063756a210d1461006f578063c19d93fb1461008f575b600080fd5b610059610054366004610490565b6100f1565b6040516100669190610614565b60405180910390f35b61008261007d36600461041e565b610140565b604051610066919061059e565b610097610383565b60405161006691908151815260208083015190820152604080830151908201526060808301516001600160a01b0316908201526080808301519082015260a0808301519082015260c0918201519181019190915260e00190565b60606014825104602081026040519250602082028352602083016020850160005b84811015610134576014810282015160601c3160208202840152600101610112565b50500160405250919050565b6060600061018b6000601086868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509294939250506104029050565b905060008060028367ffffffffffffffff8111156101ab576101ab6106b3565b6040519080825280602002602001820160405280156101f157816020015b6040805180820190915260008152606060208201528152602001906001900390816101c95790505b50945060005b84811015610378576102428289898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506104139050565b935061024f601483610658565b91506102978260108a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509294939250506104029050565b92506102a4600283610658565b91506000806001600160a01b0386168a858b6102c08983610658565b926102cd9392919061062e565b6040516102db92919061058e565b6000604051808303816000865af19150503d8060008114610318576040519150601f19603f3d011682016040523d82523d6000602084013e61031d565b606091505b5091509150604051806040016040528083151581526020018281525088848151811061034b5761034b61069d565b60209081029190910101526103608585610658565b935050506001816103719190610658565b90506101f7565b505050505092915050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091526040518060e00160405280438152602001434081526020016001436103e19190610670565b40815241602082015244604082015245606082015242608090910152919050565b910160200151610100919091031c90565b016020015160601c90565b6000806020838503121561043157600080fd5b823567ffffffffffffffff8082111561044957600080fd5b818501915085601f83011261045d57600080fd5b81358181111561046c57600080fd5b86602082850101111561047e57600080fd5b60209290920196919550909350505050565b6000602082840312156104a257600080fd5b813567ffffffffffffffff808211156104ba57600080fd5b818401915084601f8301126104ce57600080fd5b8135818111156104e0576104e06106b3565b604051601f8201601f19908116603f01168101908382118183101715610508576105086106b3565b8160405282815287602084870101111561052157600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000815180845260005b818110156105675760208185018101518683018201520161054b565b81811115610579576000602083870101525b50601f01601f19169290920160200192915050565b8183823760009101908152919050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561060657888303603f1901855281518051151584528701518784018790526105f387850182610541565b95880195935050908601906001016105c5565b509098975050505050505050565b6020815260006106276020830184610541565b9392505050565b6000808585111561063e57600080fd5b8386111561064b57600080fd5b5050820193919092039150565b6000821982111561066b5761066b610687565b500190565b60008282101561068257610682610687565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122003040584a550879a25e2969b0921f6cafe325b93c0bc1f908c75ddc14b27c0a764736f6c63430008070033";
